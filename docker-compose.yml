services:

  init-secrets:
    image: alpine:latest
    volumes:
      - ./secrets:/secrets
      - ./:/workspace
    entrypoint: >
      sh -e -c "
        apk add --no-cache openssl xxd;
        if [ ! -s /secrets/mongo_password ]; then
          openssl rand -hex 64 > /secrets/mongo_password;
          echo 'Generated mongo_password';
        fi;
        if ! grep -q '^MONGO_DB=' /workspace/.env; then
          echo 'MONGO_DB=cryptosims' >> /workspace/.env;
          echo 'Set MONGO_DB=cryptosims';
        fi;
        if ! grep -q '^MONGO_PORT=' /workspace/.env; then
          echo 'MONGO_PORT=27017' >> /workspace/.env;
          echo 'Set MONGO_PORT=27017';
        fi;
        if ! grep -q '^SECRET_KEY=' /workspace/.env; then
          echo \"SECRET_KEY=$(openssl rand -hex 64)\" >> /workspace/.env;
          echo 'Generated SECRET_KEY';
        fi;
        if ! grep -q '^SECRET_KEY_REFRESH=' /workspace/.env; then
          echo \"SECRET_KEY_REFRESH=$(openssl rand -hex 64)\" >> /workspace/.env;
          echo 'Generated SECRET_KEY_REFRESH';
        fi;
        if ! grep -q '^API_KEY=' /workspace/.env; then
          echo \"API_KEY=$(openssl rand -hex 64)\" >> /workspace/.env;
          echo 'Generated API_KEY';
        fi;
        if ! grep -q '^DOMAIN=' /workspace/.env; then
          echo 'DOMAIN=localhost' >> /workspace/.env;
          echo 'Set DOMAIN=localhost';
        fi
      "

  next:
    build:
      context: ./
      dockerfile: ./docker/nextjs/Dockerfile
    container_name: next-app
    ports:
      - '127.0.0.1:3000:3000'
    networks:
      - cryptosims
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGO_USERNAME=admin
    volumes:
      - ./src:/usr/src/app/src:ro
      - ./public:/usr/src/app/public:ro
      - ./.env:/usr/src/app/.env:ro
      - ./eslint.config.mjs:/usr/src/app/esling.config.mjs:ro
      - ./next-env.d.ts:/usr/src/app/next-env.d.ts:ro
      - ./next.config.ts:/usr/src/app/next.config.ts:ro
      - ./package.json:/usr/src/app/package.json
      - ./postcss.config.mjs:/usr/src/app/postcss.config.mjs:ro
      - ./tailwind.config.ts:/usr/src/app/tailwind.config.ts:ro
      - ./tsconfig.json:/usr/src/app/tsconfig.json:ro
    depends_on:
      init-secrets:
        condition: service_completed_successfully
      mongodb:
        condition: service_started
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000']
      interval: 10s
      timeout: 5s
      retries: 10
    secrets:
      - mongo_password

  express:
    build:
      context: ./docker/express
      dockerfile: Dockerfile
    container_name: express-server
    ports:
      - '127.0.0.1:3001:3001'
    networks:
      - cryptosims
    depends_on:
      init-secrets:
        condition: service_completed_successfully
      mongodb:
        condition: service_started
      next:
        condition: service_healthy
    env_file:
      - .env

  mongodb:
    image: mongo:latest
    container_name: mongodb
    volumes:
      - mongodb_data:/data/db
    networks:
      - cryptosims
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongo_password
    depends_on:
      init-secrets:
        condition: service_completed_successfully
    secrets:
      - mongo_password

#   fastapi:
#     image: tiangolo/uvicorn-gunicorn-fastapi:python3.11
#     container_name: fastapi-docs
#     volumes:
#       - ./docs:/app
#     ports:
#       - "8000:80"
#     networks:
#       - cryptosims

networks:
  cryptosims:
    name: cryptosims
    driver: bridge

volumes:
  mongodb_data:
    name: mongodb_data

secrets:
  mongo_password:
    file: ./secrets/mongo_password